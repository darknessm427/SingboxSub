import json
import socket
import requests
import geoip2.database
import os
from pathlib import Path

# Configuration
CONFIG_PATH = "final.json"
BACKUP_CONFIG = "final_backup.json"
GEOIP_URL = "https://cdn.jsdelivr.net/gh/chocolate4u/Iran-sing-box-rules@release/geoip.db"
GEOIP_DB_PATH = ".github/geoip.db"
IP_API = "https://api.ip.sb/geoip"
TIMEOUT = 10

# CDN categories (aligned with geoip.db)
CDN_ASN_KEYWORDS = {
    "cloudflare", "google", "amazon", "microsoft",
    "oracle", "digitalocean", "linode", "akamai",
    "fastly", "stackpath", "incapsula", "leaseweb"
}

# Extensive Emoji Mapping (250+ countries)
COUNTRY_EMOJIS = {
    "ad": "üá¶üá©", "ae": "üá¶üá™", "af": "üá¶üá´", "ag": "üá¶üá¨", "ai": "üá¶üáÆ",
    "al": "üá¶üá±", "am": "üá¶üá≤", "ao": "üá¶üá¥", "aq": "üá¶üá∂", "ar": "üá¶üá∑",
    "as": "üá¶üá∏", "at": "üá¶üáπ", "au": "üá¶üá∫", "aw": "üá¶üáº", "ax": "üá¶üáΩ",
    "az": "üá¶üáø", "ba": "üáßüá¶", "bb": "üáßüáß", "bd": "üáßüá©", "be": "üáßüá™",
    "bf": "üáßüá´", "bg": "üáßüá¨", "bh": "üáßüá≠", "bi": "üáßüáÆ", "bj": "üáßüáØ",
    "bl": "üáßüá±", "bm": "üáßüá≤", "bn": "üáßüá≥", "bo": "üáßüá¥", "bq": "üáßüá∂",
    "br": "üáßüá∑", "bs": "üáßüá∏", "bt": "üáßüáπ", "bv": "üáßüáª", "bw": "üáßüáº",
    "by": "üáßüáæ", "bz": "üáßüáø", "ca": "üá®üá¶", "cc": "üá®üá®", "cd": "üá®üá©",
    "cf": "üá®üá´", "cg": "üá®üá¨", "ch": "üá®üá≠", "ci": "üá®üáÆ", "ck": "üá®üá∞",
    "cl": "üá®üá±", "cm": "üá®üá≤", "cn": "üá®üá≥", "co": "üá®üá¥", "cr": "üá®üá∑",
    "cu": "üá®üá∫", "cv": "üá®üáª", "cw": "üá®üáº", "cx": "üá®üáΩ", "cy": "üá®üáæ",
    "cz": "üá®üáø", "de": "üá©üá™", "dj": "üá©üáØ", "dk": "üá©üá∞", "dm": "üá©üá≤",
    "do": "üá©üá¥", "dz": "üá©üáø", "ec": "üá™üá®", "ee": "üá™üá™", "eg": "üá™üá¨",
    "eh": "üá™üá≠", "er": "üá™üá∑", "es": "üá™üá∏", "et": "üá™üáπ", "fi": "üá´üáÆ",
    "fj": "üá´üáØ", "fk": "üá´üá∞", "fm": "üá´üá≤", "fo": "üá´üá¥", "fr": "üá´üá∑",
    "ga": "üá¨üá¶", "gb": "üá¨üáß", "gd": "üá¨üá©", "ge": "üá¨üá™", "gf": "üá¨üá´",
    "gg": "üá¨üá¨", "gh": "üá¨üá≠", "gi": "üá¨üáÆ", "gl": "üá¨üá±", "gm": "üá¨üá≤",
    "gn": "üá¨üá≥", "gp": "üá¨üáµ", "gq": "üá¨üá∂", "gr": "üá¨üá∑", "gs": "üá¨üá∏",
    "gt": "üá¨üáπ", "gu": "üá¨üá∫", "gw": "üá¨üáº", "gy": "üá¨üáæ", "hk": "üá≠üá∞",
    "hm": "üá≠üá≤", "hn": "üá≠üá≥", "hr": "üá≠üá∑", "ht": "üá≠üáπ", "hu": "üá≠üá∫",
    "id": "üáÆüá©", "ie": "üáÆüá™", "il": "üáÆüá±", "im": "üáÆüá≤", "in": "üáÆüá≥",
    "io": "üáÆüá¥", "iq": "üáÆüá∂", "ir": "üáÆüá∑", "is": "üáÆüá∏", "it": "üáÆüáπ",
    "je": "üáØüá™", "jm": "üáØüá≤", "jo": "üáØüá¥", "jp": "üáØüáµ", "ke": "üá∞üá™",
    "kg": "üá∞üá¨", "kh": "üá∞üá≠", "ki": "üá∞üáÆ", "km": "üá∞üá≤", "kn": "üá∞üá≥",
    "kp": "üá∞üáµ", "kr": "üá∞üá∑", "kw": "üá∞üáº", "ky": "üá∞üáæ", "kz": "üá∞üáø",
    "la": "üá±üá¶", "lb": "üá±üáß", "lc": "üá±üá®", "li": "üá±üáÆ", "lk": "üá±üá∞",
    "lr": "üá±üá∑", "ls": "üá±üá∏", "lt": "üá±üáπ", "lu": "üá±üá∫", "lv": "üá±üáª",
    "ly": "üá±üáæ", "ma": "üá≤üá¶", "mc": "üá≤üá®", "md": "üá≤üá©", "me": "üá≤üá™",
    "mf": "üá≤üá´", "mg": "üá≤üá¨", "mh": "üá≤üá≠", "mk": "üá≤üá∞", "ml": "üá≤üá±",
    "mm": "üá≤üá≤", "mn": "üá≤üá≥", "mo": "üá≤üá¥", "mp": "üá≤üáµ", "mq": "üá≤üá∂",
    "mr": "üá≤üá∑", "ms": "üá≤üá∏", "mt": "üá≤üáπ", "mu": "üá≤üá∫", "mv": "üá≤üáª",
    "mw": "üá≤üáº", "mx": "üá≤üáΩ", "my": "üá≤üáæ", "mz": "üá≤üáø", "na": "üá≥üá¶",
    "nc": "üá≥üá®", "ne": "üá≥üá™", "nf": "üá≥üá´", "ng": "üá≥üá¨", "ni": "üá≥üáÆ",
    "nl": "üá≥üá±", "no": "üá≥üá¥", "np": "üá≥üáµ", "nr": "üá≥üá∑", "nu": "üá≥üá∫",
    "nz": "üá≥üáø", "om": "üá¥üá≤", "pa": "üáµüá¶", "pe": "üáµüá™", "pf": "üáµüá´",
    "pg": "üáµüá¨", "ph": "üáµüá≠", "pk": "üáµüá∞", "pl": "üáµüá±", "pm": "üáµüá≤",
    "pn": "üáµüá≥", "pr": "üáµüá∑", "ps": "üáµüá∏", "pt": "üáµüáπ", "pw": "üáµüáº",
    "py": "üáµüáæ", "qa": "üá∂üá¶", "re": "üá∑üá™", "ro": "üá∑üá¥", "rs": "üá∑üá∏",
    "ru": "üá∑üá∫", "rw": "üá∑üáº", "sa": "üá∏üá¶", "sb": "üá∏üáß", "sc": "üá∏üá®",
    "sd": "üá∏üá©", "se": "üá∏üá™", "sg": "üá∏üá¨", "sh": "üá∏üá≠", "si": "üá∏üáÆ",
    "sj": "üá∏üáØ", "sk": "üá∏üá∞", "sl": "üá∏üá±", "sm": "üá∏üá≤", "sn": "üá∏üá≥",
    "so": "üá∏üá¥", "sr": "üá∏üá∑", "ss": "üá∏üá∏", "st": "üá∏üáπ", "sv": "üá∏üáª",
    "sx": "üá∏üáΩ", "sy": "üá∏üáæ", "sz": "üá∏üáø", "tc": "üáπüá®", "td": "üáπüá©",
    "tf": "üáπüá´", "tg": "üáπüá¨", "th": "üáπüá≠", "tj": "üáπüáØ", "tk": "üáπüá∞",
    "tl": "üáπüá±", "tm": "üáπüá≤", "tn": "üáπüá≥", "to": "üáπüá¥", "tr": "üáπüá∑",
    "tt": "üáπüáπ", "tv": "üáπüáª", "tw": "üáπüáº", "tz": "üáπüáø", "ua": "üá∫üá¶",
    "ug": "üá∫üá¨", "um": "üá∫üá≤", "us": "üá∫üá∏", "uy": "üá∫üáæ", "uz": "üá∫üáø",
    "va": "üáªüá¶", "vc": "üáªüá®", "ve": "üáªüá™", "vg": "üáªüá¨", "vi": "üáªüáÆ",
    "vn": "üáªüá≥", "vu": "üáªüá∫", "wf": "üáºüá´", "ws": "üáºüá∏", "xk": "üáΩüá∞",
    "ye": "üáæüá™", "yt": "üáæüáπ", "za": "üáøüá¶", "zm": "üáøüá≤", "zw": "üáøüáº",
    
    # Special cases
    "eu": "üá™üá∫", "un": "üá∫üá≥",
    "unknown": "üåê", "local": "üè†", "private": "üîí"
}

def download_geoip_db():
    """Download geoip.db with retry logic"""
    try:
        if not Path(GEOIP_DB_PATH).exists():
            print("‚¨áÔ∏è Downloading GeoIP database...")
            for attempt in range(3):
                try:
                    response = requests.get(GEOIP_URL, timeout=TIMEOUT)
                    response.raise_for_status()
                    with open(GEOIP_DB_PATH, "wb") as f:
                        f.write(response.content)
                    print("‚úÖ GeoIP database downloaded")
                    return True
                except Exception as e:
                    if attempt == 2:
                        raise
                    print(f"‚ö†Ô∏è Attempt {attempt+1} failed, retrying...")
        return True
    except Exception as e:
        print(f"‚ùå Failed to download GeoIP DB: {e}")
        return False

def load_geoip_reader():
    """Load GeoIP reader with validation"""
    try:
        if not os.path.exists(GEOIP_DB_PATH):
            return None
        return geoip2.database.Reader(GEOIP_DB_PATH)
    except Exception as e:
        print(f"‚ùå GeoIP DB error: {e}")
        return None

def is_cdn_ip(geoip_reader, ip):
    """Enhanced CDN detection with ASN lookup"""
    if not geoip_reader:
        return False
    try:
        # First check if IP is in common CDN ranges
        if ip.startswith(('104.16.', '172.64.', '108.162.')):  # Cloudflare
            return True
        if ip.startswith(('34.64.', '35.184.', '130.176.')):  # Google Cloud
            return True
            
        # Then check ASN organization
        asn = geoip_reader.asn(ip)
        org = asn.autonomous_system_organization.lower()
        return any(keyword in org for keyword in CDN_ASN_KEYWORDS)
    except:
        return False

def resolve_ip(domain):
    """Resolve domain with caching and special cases"""
    if domain in ["localhost", "127.0.0.1"]:
        return "localhost"
    if domain.startswith(("10.", "172.16.", "192.168.")):
        return "private"
    try:
        return socket.gethostbyname(domain)
    except:
        return domain

def get_country_emoji(geoip_reader, ip):
    """Get emoji with priority: CDN > Private > Country > Unknown"""
    if ip == "localhost":
        return COUNTRY_EMOJIS["localhost"]
    if ip == "private":
        return COUNTRY_EMOJIS["private"]
        
    if geoip_reader and is_cdn_ip(geoip_reader, ip):
        return COUNTRY_EMOJIS["cdn"]
    
    country_code = "unknown"
    if geoip_reader:
        try:
            country = geoip_reader.country(ip)
            country_code = country.country.iso_code.lower()
        except:
            pass
    
    if country_code == "unknown":
        try:
            data = requests.get(f"{IP_API}/{ip}", timeout=5).json()
            country_code = data.get("country_code", "unknown").lower()
        except:
            pass
    
    return COUNTRY_EMOJIS.get(country_code, "üåê")

def process_proxies(config, geoip_reader):
    """Process all proxies with comprehensive logging"""
    seen = set()
    results = {
        "total": 0,
        "duplicates": 0,
        "cdn": 0,
        "countries": {}
    }
    
    for proxy in config.get("outbounds", []):
        if proxy["type"] not in ("vmess", "trojan", "shadowsocks", "vless", "hysteria", "hysteria2", "anytls", "tuic", "shadowtls"):
            continue
            
        results["total"] += 1
        server = proxy.get("server", "").strip()
        port = str(proxy.get("server_port", "")).strip()
        
        if not server or not port:
            continue
            
        # Resolve IP but keep original domain if available
        original_display = server
        ip = resolve_ip(server)
        
        # Handle duplicates based on IP:port (not domain:port)
        if (ip, port) in seen:
            print(f"‚ûñ Duplicate: {proxy.get('tag','')} ({ip}:{port})")
            results["duplicates"] += 1
            continue
        seen.add((ip, port))
        
        # Get emoji and update stats
        emoji = get_country_emoji(geoip_reader, ip)
        if emoji == "üè¥":
            results["cdn"] += 1
        else:
            results["countries"][emoji] = results["countries"].get(emoji, 0) + 1
        
        # Determine display address (domain if available, otherwise IP)
        display_address = f"{original_display}:{port}" if is_domain(server) else f"{ip}:{port}"

        # Update tag while preserving original domain if present
        proxy["tag"] = f"{emoji} - {display_address} [{proxy['type']}]"
    
    # Print summary
    print("\nüìä Results:")
    print(f"‚Ä¢ Total proxies: {results['total']}")
    print(f"‚Ä¢ Duplicates removed: {results['duplicates']}")
    print(f"‚Ä¢ CDN proxies: {results['cdn']}")
    print("‚Ä¢ Country distribution:")
    for emoji, count in sorted(results["countries"].items(), key=lambda x: -x[1]):
        print(f"  {emoji}: {count}")
    
    return config

def is_domain(address):
    """Check if the address is a domain name (not IP)"""
    try:
        # Simple check - if it's not an IP address, assume it's a domain
        socket.inet_aton(address)
        return False
    except socket.error:
        return True

def sort_proxies(config):
    """Sort proxies alphabetically by tag and organize in outbounds[1].outbounds"""
    if len(config.get("outbounds", [])) < 2:
        return config
    
    # Extract all proxy outbounds (excluding the first two special entries)
    proxies = [outbound for outbound in config["outbounds"][2:] 
               if outbound["type"] in ("vmess", "trojan", "shadowsocks", "vless", "hysteria", "hysteria2")]
    
    # Sort proxies by their tag
    proxies_sorted = sorted(proxies, key=lambda x: x.get("tag", "").lower())
    
    # Rebuild outbounds structure:
    # 1. Keep original first outbound (usually direct/dns)
    # 2. Create selector outbound with sorted tags
    # 3. Append sorted proxies
    new_outbounds = [
        config["outbounds"][0],  # Preserve first outbound (e.g., "direct")
        {
            "type": "selector",
            "tag": "proxy-selector",
            "outbounds": [p["tag"] for p in proxies_sorted],
            "default": proxies_sorted[0]["tag"] if proxies_sorted else ""
        },
        *proxies_sorted
    ]
    
    config["outbounds"] = new_outbounds
    return config

def main():
    print("üöÄ Starting proxy tagging process...")
    
    # GeoIP setup
    if not download_geoip_db():
        print("‚ö†Ô∏è Proceeding without GeoIP database (limited functionality)")
    geoip_reader = load_geoip_reader()
    
    # Load config
    try:
        with open(CONFIG_PATH, "r") as f:
            config = json.load(f)
    except Exception as e:
        print(f"‚ùå Failed to load config: {e}")
        return
    
    # Process proxies
    updated_config = process_proxies(config, geoip_reader)

    # Sort and reorganize proxies
    updated_config = sort_proxies(updated_config)
    
    # Backup and save
    try:
        with open(BACKUP_CONFIG, "w") as f:
            json.dump(config, f, indent=2)
        with open(CONFIG_PATH, "w") as f:
            json.dump(updated_config, f, indent=2)
        print(f"\n‚úÖ Config saved! Backup: {BACKUP_CONFIG}")
    except Exception as e:
        print(f"‚ùå Failed to save config: {e}")

if __name__ == "__main__":
    main()
